import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

// Clase Vehículo
class Vehiculo {
    private String modelo;
    private String marca;
    private double costo;

    // Constructor
    public Vehiculo(String modelo, String marca, double costo) {
        this.modelo = modelo;
        this.marca = marca;
        this.costo = costo;
    }

    // Getters y Setters
    public String getModelo() {
        return modelo;
    }

    public void setModelo(String modelo) {
        this.modelo = modelo;
    }

    public String getMarca() {
        return marca;
    }

    public void setMarca(String marca) {
        this.marca = marca;
    }

    public double getCosto() {
        return costo;
    }

    public void setCosto(double costo) {
        this.costo = costo;
    }

    @Override
    public String toString() {
        return "Vehiculo{" +
                "modelo='" + modelo + '\'' +
                ", marca='" + marca + '\'' +
                ", costo=" + costo +
                '}';
    }
}

// Clase Garaje
class Garaje {
    private int id;
    private List<Vehiculo> vehiculos;

    // Constructor
    public Garaje(int id, List<Vehiculo> vehiculos) {
        this.id = id;
        this.vehiculos = vehiculos;
    }

    // Getters y Setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public List<Vehiculo> getVehiculos() {
        return vehiculos;
    }

    public void setVehiculos(List<Vehiculo> vehiculos) {
        this.vehiculos = vehiculos;
    }

    @Override
    public String toString() {
        return "Garaje{" +
                "id=" + id +
                ", vehiculos=" + vehiculos +
                '}';
    }
}

// Clase Main
public class Main {
    public static void main(String[] args) {
        // Crear instancias de la clase Vehiculo
        Vehiculo vehiculo1 = new Vehiculo("Modelo1", "Marca2", 1200);
        Vehiculo vehiculo2 = new Vehiculo("Modelo3", "Marca1", 800);
        Vehiculo vehiculo3 = new Vehiculo("Modelo2", "Marca3", 1500);

        // Crear una lista de vehículos y añadir las instancias creadas
        List<Vehiculo> listaVehiculos = new ArrayList<>();
        listaVehiculos.add(vehiculo1);
        listaVehiculos.add(vehiculo2);
        listaVehiculos.add(vehiculo3);

        // Crear instancia de la clase Garaje
        Garaje garaje = new Garaje(1, listaVehiculos);

        // Ejercicio 3: Ordenar por precio de menor a mayor e imprimir
        System.out.println("Lista ordenada por precio de menor a mayor:");
        garaje.getVehiculos().sort(Comparator.comparingDouble(Vehiculo::getCosto));
        garaje.getVehiculos().forEach(System.out::println);

        // Ejercicio 4: Ordenar por marca y por precio e imprimir
        System.out.println("\nLista ordenada por marca y por precio:");
        garaje.getVehiculos().sort(Comparator.comparing(Vehiculo::getMarca).thenComparingDouble(Vehiculo::getCosto));
        garaje.getVehiculos().forEach(System.out::println);

        // Ejercicio 5: Filtrar por precio y obtener el promedio total
        System.out.println("\nLista de vehículos con precio no mayor a 1000:");
        List<Vehiculo> vehiculosMenor1000 = filtrarPorPrecio(listaVehiculos, 1000);
        vehiculosMenor1000.forEach(System.out::println);

        System.out.println("\nLista de vehículos con precio mayor o igual a 1000:");
        List<Vehiculo> vehiculosMayorIgual1000 = filtrarPorPrecio(listaVehiculos, 1000, true);
        vehiculosMayorIgual1000.forEach(System.out::println);

        System.out.println("\nPromedio total de precios de los vehículos: " + calcularPromedio(listaVehiculos));
    }

    // Método para filtrar vehículos por precio
    private static List<Vehiculo> filtrarPorPrecio(List<Vehiculo> vehiculos, double precioLimite) {
        List<Vehiculo> resultado = new ArrayList<>();
        for (Vehiculo vehiculo : vehiculos) {
            if (vehiculo.getCosto() <= precioLimite) {
                resultado.add(vehiculo);
            }
        }
        return resultado;
    }

    // Sobrecarga del método para filtrar vehículos por precio (mayor o igual)
    private static List<Vehiculo> filtrarPorPrecio(List<Vehiculo> vehiculos, double precioLimite, boolean mayorIgual) {
        List<Vehiculo> resultado = new ArrayList<>();
        for (Vehiculo vehiculo : vehiculos) {
            if (mayorIgual) {
                if (vehiculo.getCosto() >= precioLimite) {
                    resultado.add(vehiculo);
                }
            } else {
                if (vehiculo.getCosto() < precioLimite) {
                    resultado.add(vehiculo);
                }
            }
        }
        return resultado;
    }

    // Método para calcular el promedio de los precios de los vehículos
    private static double calcularPromedio(List<Vehiculo> vehiculos) {
        double suma = 0;
        for (Vehiculo vehiculo : vehiculos) {
            suma += vehiculo.getCosto();
        }
        return vehiculos.isEmpty() ? 0 : suma / vehiculos.size();
    }
}
