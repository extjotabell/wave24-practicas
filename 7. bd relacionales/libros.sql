-- MySQL Script generated by MySQL Workbench
-- Wed Jan 31 12:12:20 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering
SET @OLD_UNIQUE_CHECKS = @@UNIQUE_CHECKS, UNIQUE_CHECKS = 0;
SET @OLD_FOREIGN_KEY_CHECKS = @@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS = 0;
SET @OLD_SQL_MODE = @@SQL_MODE, SQL_MODE =
        'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
-- -----------------------------------------------------
-- Schema biblioteca
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `biblioteca` DEFAULT CHARACTER SET utf8;
USE `biblioteca`;
-- -----------------------------------------------------
-- Table `biblioteca`.`libro`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `biblioteca`.`libro`;
CREATE TABLE IF NOT EXISTS `biblioteca`.`libro`
(
    `id_libro`  INT         NOT NULL,
    `titulo`    VARCHAR(45) NULL,
    `editorial` VARCHAR(45) NULL,
    `area`      VARCHAR(45) NULL,
    PRIMARY KEY (`id_libro`)
)
    ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `biblioteca`.`estudiante`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `biblioteca`.`estudiante`;
CREATE TABLE IF NOT EXISTS `biblioteca`.`estudiante`
(
    `id_estudiante` INT         NOT NULL,
    `nombre`        VARCHAR(45) NULL,
    `apellido`      VARCHAR(45) NULL,
    `direccion`     VARCHAR(45) NULL,
    `carrera`       VARCHAR(45) NULL,
    `edad`          INT(2)      NULL,
    PRIMARY KEY (`id_estudiante`)
)
    ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `biblioteca`.`prestamo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `biblioteca`.`prestamo`;
CREATE TABLE IF NOT EXISTS `biblioteca`.`prestamo`
(
    `id_lector`        INT  NOT NULL,
    `id_libro`         INT  NOT NULL,
    `fecha_prestamo`   DATE NOT NULL,
    `fecha_devolucion` DATE NOT NULL,
    `devuelto`         BIT  NOT NULL,
    PRIMARY KEY (`id_libro`, `id_lector`),
    CONSTRAINT `prestamo_id_libro`
        FOREIGN KEY (`id_libro`)
            REFERENCES `biblioteca`.`libro` (`id_libro`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION,
    CONSTRAINT `prestamo_id_lector`
        FOREIGN KEY (`id_lector`)
            REFERENCES `biblioteca`.`estudiante` (`id_estudiante`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
)
    ENGINE = InnoDB;
SET SQL_MODE = @OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS = @OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Table `biblioteca`.`autor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `biblioteca`.`autor`;
CREATE TABLE IF NOT EXISTS `biblioteca`.`autor`
(
    `id_autor`     INT         NOT NULL,
    `nombre`       VARCHAR(45) NULL,
    `nacionalidad` VARCHAR(45) NULL,
    PRIMARY KEY (`id_autor`)
)
    ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `biblioteca`.`libro_autor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `biblioteca`.`libro_autor`;
CREATE TABLE IF NOT EXISTS `biblioteca`.`libro_autor`
(
    `id_libro` INT NOT NULL,
    `id_autor` INT NOT NULL,
    PRIMARY KEY (`id_libro`, `id_autor`),
    CONSTRAINT `libro_autor_id_libro`
        FOREIGN KEY (`id_libro`)
            REFERENCES `biblioteca`.`libro` (`id_libro`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION,
    CONSTRAINT `libro_autor_id_autor`
        FOREIGN KEY (`id_autor`)
            REFERENCES `biblioteca`.`autor` (`id_autor`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Insert data into `biblioteca`.`libro`
-- -----------------------------------------------------
INSERT INTO `biblioteca`.`libro` (`id_libro`, `titulo`, `editorial`, `area`) VALUES (1, 'El principito', 'Santillana', 'Literatura');
INSERT INTO `biblioteca`.`libro` (`id_libro`, `titulo`, `editorial`, `area`) VALUES (2, 'El alquimista', 'Santillana', 'Literatura');
INSERT INTO `biblioteca`.`libro` (`id_libro`, `titulo`, `editorial`, `area`) VALUES (3, 'El arte de la guerra', 'Santillana', 'Literatura');
INSERT INTO `biblioteca`.`libro` (`id_libro`, `titulo`, `editorial`, `area`) VALUES (4, 'El código Da Vinci', 'Santillana', 'Literatura');
INSERT INTO `biblioteca`.`libro` (`id_libro`, `titulo`, `editorial`, `area`) VALUES (5, 'El señor de los anillos', 'Santillana', 'Literatura');

-- -----------------------------------------------------
-- Insert data into `biblioteca`.`estudiante`
-- -----------------------------------------------------
INSERT INTO `biblioteca`.`estudiante` (`id_estudiante`, `nombre`, `apellido`, `direccion`, `carrera`, `edad`) VALUES (1, 'Juan', 'Perez', 'Calle 1', 'Ing. Sistemas', 20);
INSERT INTO `biblioteca`.`estudiante` (`id_estudiante`, `nombre`, `apellido`, `direccion`, `carrera`, `edad`) VALUES (2, 'Maria', 'Lopez', 'Calle 2', 'Ing. Sistemas', 21);
INSERT INTO `biblioteca`.`estudiante` (`id_estudiante`, `nombre`, `apellido`, `direccion`, `carrera`, `edad`) VALUES (3, 'Pedro', 'Gomez', 'Calle 3', 'Ing. Sistemas', 22);
INSERT INTO `biblioteca`.`estudiante` (`id_estudiante`, `nombre`, `apellido`, `direccion`, `carrera`, `edad`) VALUES (4, 'Luis', 'Garcia', 'Calle 4', 'Ing. Sistemas', 23);
INSERT INTO `biblioteca`.`estudiante` (`id_estudiante`, `nombre`, `apellido`, `direccion`, `carrera`, `edad`) VALUES (5, 'Ana', 'Gomez', 'Calle 5', 'Ing. Sistemas', 24);

-- -----------------------------------------------------
-- Insert data into `biblioteca`.`prestamo`
-- -----------------------------------------------------
INSERT INTO `biblioteca`.`prestamo` (`id_lector`, `id_libro`, `fecha_prestamo`, `fecha_devolucion`, `devuelto`) VALUES (1, 1, '2024-01-31', '2024-02-01', 0);
INSERT INTO `biblioteca`.`prestamo` (`id_lector`, `id_libro`, `fecha_prestamo`, `fecha_devolucion`, `devuelto`) VALUES (2, 2, '2024-01-31', '2024-02-01', 0);
INSERT INTO `biblioteca`.`prestamo` (`id_lector`, `id_libro`, `fecha_prestamo`, `fecha_devolucion`, `devuelto`) VALUES (3, 3, '2024-01-31', '2024-02-01', 0);
INSERT INTO `biblioteca`.`prestamo` (`id_lector`, `id_libro`, `fecha_prestamo`, `fecha_devolucion`, `devuelto`) VALUES (4, 4, '2024-01-31', '2024-02-01', 0);
INSERT INTO `biblioteca`.`prestamo` (`id_lector`, `id_libro`, `fecha_prestamo`, `fecha_devolucion`, `devuelto`) VALUES (5, 5, '2024-01-31', '2024-02-01', 0);

-- -----------------------------------------------------
-- Insert data into `biblioteca`.`autor`
-- -----------------------------------------------------
INSERT INTO `biblioteca`.`autor` (`id_autor`, `nombre`, `nacionalidad`) VALUES (1, 'Antoine de Saint-Exupéry', 'Francesa');
INSERT INTO `biblioteca`.`autor` (`id_autor`, `nombre`, `nacionalidad`) VALUES (2, 'Paulo Coelho', 'Brasileña');
INSERT INTO `biblioteca`.`autor` (`id_autor`, `nombre`, `nacionalidad`) VALUES (3, 'Sun Tzu', 'China');
INSERT INTO `biblioteca`.`autor` (`id_autor`, `nombre`, `nacionalidad`) VALUES (4, 'Dan Brown', 'Estadounidense');
INSERT INTO `biblioteca`.`autor` (`id_autor`, `nombre`, `nacionalidad`) VALUES (5, 'J.R.R. Tolkien', 'Sudafricana');

USE `biblioteca`;

-- Listar los datos de los autores.
select * from autor;
-- Listar nombre y edad de los estudiantes
select nombre, edad from estudiante;
-- ¿Qué estudiantes pertenecen a la carrera informática?
select nombre, apellido from estudiante where carrera = 'Informatica';
-- ¿Qué autores son de nacionalidad francesa o italiana?
select nombre from autor where nacionalidad = 'Francesa' or nacionalidad = 'Italiana';
-- ¿Qué libros no son del área de internet?
select titulo from libro where area <> 'Internet';
-- Listar los libros de la editorial Salamandra.
select titulo from libro where editorial = 'Salamandra';
-- Listar los datos de los estudiantes cuya edad es mayor al promedio.
select * from estudiante where edad > (select avg(edad) from estudiante);
-- Listar los nombres de los estudiantes cuyo apellido comience con la letra G.
select nombre from estudiante where apellido like 'G%';
-- Listar los autores del libro “El Universo: Guía de viaje”. (Se debe listar solamente los nombres).
select nombre from autor
where id_autor in
    (select id_autor from libro_autor where id_libro =
    (select id_libro from libro where titulo = 'El Universo: Guía de viaje'));
-- ¿Qué libros se prestaron al lector “Filippo Galli”?
select titulo from libro
where id_libro in
    (select id_libro from prestamo where id_lector =
    (select id_lector from estudiante where nombre = 'Filippo Galli'));
-- Listar el nombre del estudiante de menor edad.
select nombre from estudiante order by edad limit 1;
-- Listar nombres de los estudiantes a los que se prestaron libros de Base de Datos.
select nombre from estudiante
where id_estudiante in
    (select id_lector from prestamo where id_libro =
    (select id_libro from libro where area = 'Base de Datos'));
-- Listar los libros que pertenecen a la autora J.K. Rowling.
select titulo from libro
where id_libro in
    (select id_libro from libro_autor where id_autor =
    (select id_autor from autor where nombre = 'J.K. Rowling'));
-- Listar títulos de los libros que debían devolverse el 16/07/2021.
select l.titulo from libro l
join prestamo p on p.id_libro = l.id_libro
where p.fecha_devolucion = '2021-07-16';
